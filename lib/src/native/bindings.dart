// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: experiment_not_enabled

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the source code in ./src/cpp
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Ensures that the transport response buffer will be appropriately sized
  /// Returns a pointer to the buffer if valid, nullptr if not
  ffi.Pointer<ffi.Uint8> Core_allocateTransportResponseBuffer(
    int sizeInBytes,
  ) {
    return _Core_allocateTransportResponseBuffer(
      sizeInBytes,
    );
  }

  late final _Core_allocateTransportResponseBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int32)>>(
          'Core_allocateTransportResponseBuffer');
  late final _Core_allocateTransportResponseBuffer =
      _Core_allocateTransportResponseBufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Attempts to perform an initial handshake with a CKTapCard
  int Core_beginAsyncHandshake(
    int cardType,
  ) {
    return _Core_beginAsyncHandshake(
      cardType,
    );
  }

  late final _Core_beginAsyncHandshakePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Core_beginAsyncHandshake');
  late final _Core_beginAsyncHandshake =
      _Core_beginAsyncHandshakePtr.asFunction<int Function(int)>();

  /// Must be called last to store and retrieve Satscard/Tapsigner data
  CKTapOperationResponse Core_endOperation() {
    return _Core_endOperation();
  }

  late final _Core_endOperationPtr =
      _lookup<ffi.NativeFunction<CKTapOperationResponse Function()>>(
          'Core_endOperation');
  late final _Core_endOperation =
      _Core_endOperationPtr.asFunction<CKTapOperationResponse Function()>();

  /// Must be called at the end of every async action
  int Core_finalizeAsyncAction() {
    return _Core_finalizeAsyncAction();
  }

  late final _Core_finalizeAsyncActionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_finalizeAsyncAction');
  late final _Core_finalizeAsyncAction =
      _Core_finalizeAsyncActionPtr.asFunction<int Function()>();

  /// Informs the native thread that it's now safe to read the previously allocated buffer
  int Core_finalizeTransportResponse() {
    return _Core_finalizeTransportResponse();
  }

  late final _Core_finalizeTransportResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_finalizeTransportResponse');
  late final _Core_finalizeTransportResponse =
      _Core_finalizeTransportResponsePtr.asFunction<int Function()>();

  /// Gets the most recent tap_protocol::TapProtoException ONLY if the current thread state is
  /// CKTapThreadState::tapProtocolError
  CKTapProtoException Core_getTapProtoException() {
    return _Core_getTapProtoException();
  }

  late final _Core_getTapProtoExceptionPtr =
      _lookup<ffi.NativeFunction<CKTapProtoException Function()>>(
          'Core_getTapProtoException');
  late final _Core_getTapProtoException = _Core_getTapProtoExceptionPtr
      .asFunction<CKTapProtoException Function()>();

  /// Gets the current native thread state atomically
  int Core_getThreadState() {
    return _Core_getThreadState();
  }

  late final _Core_getThreadStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Core_getThreadState');
  late final _Core_getThreadState =
      _Core_getThreadStatePtr.asFunction<int Function()>();

  /// Retrieves the size of the current transport request in bytes
  /// Returns 0 if the native thread isn't ready or is invalid
  int Core_getTransportRequestLength() {
    return _Core_getTransportRequestLength();
  }

  late final _Core_getTransportRequestLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_getTransportRequestLength');
  late final _Core_getTransportRequestLength =
      _Core_getTransportRequestLengthPtr.asFunction<int Function()>();

  /// Retrieves a pointer to the current transport request
  /// Returns nullptr if the native thread isn't ready or is invalid
  ffi.Pointer<ffi.Uint8> Core_getTransportRequestPointer() {
    return _Core_getTransportRequestPointer();
  }

  late final _Core_getTransportRequestPointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
          'Core_getTransportRequestPointer');
  late final _Core_getTransportRequestPointer =
      _Core_getTransportRequestPointerPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function()>();

  /// Ensures the library and native thread are initialized
  int Core_initializeLibrary() {
    return _Core_initializeLibrary();
  }

  late final _Core_initializeLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_initializeLibrary');
  late final _Core_initializeLibrary =
      _Core_initializeLibraryPtr.asFunction<int Function()>();

  /// Must be called first to restore the native thread to its initial state
  int Core_newOperation() {
    return _Core_newOperation();
  }

  late final _Core_newOperationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Core_newOperation');
  late final _Core_newOperation =
      _Core_newOperationPtr.asFunction<int Function()>();

  /// Signals cancellation of the current operation, causing the thread to enter a
  /// resettable state
  int Core_requestCancelOperation() {
    return _Core_requestCancelOperation();
  }

  late final _Core_requestCancelOperationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_requestCancelOperation');
  late final _Core_requestCancelOperation =
      _Core_requestCancelOperationPtr.asFunction<int Function()>();

  /// Gets a C representation of parameters required to construct a [Satscard] in dart. Note: must use
  /// [Utility_freeSatscardConstructorParams] when you are finished using the data to deallocate memory
  SatscardConstructorParams Satscard_createConstructorParams(
    int handle,
  ) {
    return _Satscard_createConstructorParams(
      handle,
    );
  }

  late final _Satscard_createConstructorParamsPtr = _lookup<
          ffi.NativeFunction<SatscardConstructorParams Function(ffi.Int32)>>(
      'Satscard_createConstructorParams');
  late final _Satscard_createConstructorParams =
      _Satscard_createConstructorParamsPtr.asFunction<
          SatscardConstructorParams Function(int)>();

  SatscardGetSlotResponse Satscard_getActiveSlot(
    int handle,
  ) {
    return _Satscard_getActiveSlot(
      handle,
    );
  }

  late final _Satscard_getActiveSlotPtr =
      _lookup<ffi.NativeFunction<SatscardGetSlotResponse Function(ffi.Int32)>>(
          'Satscard_getActiveSlot');
  late final _Satscard_getActiveSlot = _Satscard_getActiveSlotPtr.asFunction<
      SatscardGetSlotResponse Function(int)>();

  SlotToWifResponse Satscard_slotToWif(
    int handle,
    int index,
  ) {
    return _Satscard_slotToWif(
      handle,
      index,
    );
  }

  late final _Satscard_slotToWifPtr = _lookup<
          ffi.NativeFunction<SlotToWifResponse Function(ffi.Int32, ffi.Int32)>>(
      'Satscard_slotToWif');
  late final _Satscard_slotToWif =
      _Satscard_slotToWifPtr.asFunction<SlotToWifResponse Function(int, int)>();

  /// Gets a C representation of parameters required to construct a [Tapsigner] in dart. Note: must use
  /// [Utility_freeTapsignerConstructorParams] when you are finished using the data to deallocate memory
  TapsignerConstructorParams Tapsigner_createConstructorParams(
    int handle,
  ) {
    return _Tapsigner_createConstructorParams(
      handle,
    );
  }

  late final _Tapsigner_createConstructorParamsPtr = _lookup<
          ffi.NativeFunction<TapsignerConstructorParams Function(ffi.Int32)>>(
      'Tapsigner_createConstructorParams');
  late final _Tapsigner_createConstructorParams =
      _Tapsigner_createConstructorParamsPtr.asFunction<
          TapsignerConstructorParams Function(int)>();

  /// ----------------------------------------------
  /// Utility:
  void Utility_freeCBinaryArray(
    CBinaryArray array,
  ) {
    return _Utility_freeCBinaryArray(
      array,
    );
  }

  late final _Utility_freeCBinaryArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBinaryArray)>>(
          'Utility_freeCBinaryArray');
  late final _Utility_freeCBinaryArray =
      _Utility_freeCBinaryArrayPtr.asFunction<void Function(CBinaryArray)>();

  void Utility_freeCKTapInterfaceStatus(
    CKTapInterfaceStatus status,
  ) {
    return _Utility_freeCKTapInterfaceStatus(
      status,
    );
  }

  late final _Utility_freeCKTapInterfaceStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CKTapInterfaceStatus)>>(
          'Utility_freeCKTapInterfaceStatus');
  late final _Utility_freeCKTapInterfaceStatus =
      _Utility_freeCKTapInterfaceStatusPtr.asFunction<
          void Function(CKTapInterfaceStatus)>();

  void Utility_freeCKTapProtoException(
    CKTapProtoException exception,
  ) {
    return _Utility_freeCKTapProtoException(
      exception,
    );
  }

  late final _Utility_freeCKTapProtoExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CKTapProtoException)>>(
          'Utility_freeCKTapProtoException');
  late final _Utility_freeCKTapProtoException =
      _Utility_freeCKTapProtoExceptionPtr.asFunction<
          void Function(CKTapProtoException)>();

  void Utility_freeCString(
    ffi.Pointer<ffi.Char> cString,
  ) {
    return _Utility_freeCString(
      cString,
    );
  }

  late final _Utility_freeCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Utility_freeCString');
  late final _Utility_freeCString = _Utility_freeCStringPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>)>();

  void Utility_freeSatscardConstructorParams(
    SatscardConstructorParams params,
  ) {
    return _Utility_freeSatscardConstructorParams(
      params,
    );
  }

  late final _Utility_freeSatscardConstructorParamsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SatscardConstructorParams)>>(
          'Utility_freeSatscardConstructorParams');
  late final _Utility_freeSatscardConstructorParams =
      _Utility_freeSatscardConstructorParamsPtr.asFunction<
          void Function(SatscardConstructorParams)>();

  void Utility_freeSatscardGetSlotResponse(
    SatscardGetSlotResponse response,
  ) {
    return _Utility_freeSatscardGetSlotResponse(
      response,
    );
  }

  late final _Utility_freeSatscardGetSlotResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SatscardGetSlotResponse)>>(
          'Utility_freeSatscardGetSlotResponse');
  late final _Utility_freeSatscardGetSlotResponse =
      _Utility_freeSatscardGetSlotResponsePtr.asFunction<
          void Function(SatscardGetSlotResponse)>();

  void Utility_freeSlotConstructorParams(
    SlotConstructorParams params,
  ) {
    return _Utility_freeSlotConstructorParams(
      params,
    );
  }

  late final _Utility_freeSlotConstructorParamsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SlotConstructorParams)>>(
          'Utility_freeSlotConstructorParams');
  late final _Utility_freeSlotConstructorParams =
      _Utility_freeSlotConstructorParamsPtr.asFunction<
          void Function(SlotConstructorParams)>();

  void Utility_freeSlotToWifResponse(
    SlotToWifResponse response,
  ) {
    return _Utility_freeSlotToWifResponse(
      response,
    );
  }

  late final _Utility_freeSlotToWifResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SlotToWifResponse)>>(
          'Utility_freeSlotToWifResponse');
  late final _Utility_freeSlotToWifResponse = _Utility_freeSlotToWifResponsePtr
      .asFunction<void Function(SlotToWifResponse)>();

  void Utility_freeTapsignerConstructorParams(
    TapsignerConstructorParams params,
  ) {
    return _Utility_freeTapsignerConstructorParams(
      params,
    );
  }

  late final _Utility_freeTapsignerConstructorParamsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TapsignerConstructorParams)>>(
      'Utility_freeTapsignerConstructorParams');
  late final _Utility_freeTapsignerConstructorParams =
      _Utility_freeTapsignerConstructorParamsPtr.asFunction<
          void Function(TapsignerConstructorParams)>();
}

class CBinaryArray extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int length;
}

class CKTapCardConstructorParams extends ffi.Struct {
  @ffi.Int32()
  external int handle;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Char> ident;

  external ffi.Pointer<ffi.Char> appletVersion;

  @ffi.Int32()
  external int authDelay;

  @ffi.Int32()
  external int birthHeight;

  @ffi.Int8()
  external int isCertsChecked;

  @ffi.Int8()
  external int isTampered;

  @ffi.Int8()
  external int isTestnet;

  @ffi.Int8()
  external int needsSetup;
}

class CKTapCardHandle extends ffi.Struct {
  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int type;
}

abstract class CKTapCardType {
  static const int unknownCard = 0;
  static const int satscard = 1;
  static const int tapsigner = 2;
}

/// @brief Represents errors that may occur when the library is used incorrectly
abstract class CKTapInterfaceErrorCode {
  static const int pending = 0;
  static const int success = 1;
  static const int attemptToFinalizeActiveThread = 2;
  static const int caughtTapProtocolException = 3;
  static const int expectedSatscardButReceivedNothing = 4;
  static const int expectedTapsignerButReceivedNothing = 5;
  static const int failedToPerformHandshake = 6;
  static const int invalidCardDuringHandshake = 7;
  static const int invalidHandlingOfCardDuringFinalization = 8;
  static const int libraryNotInitialized = 9;
  static const int operationCanceled = 10;
  static const int operationFailed = 11;
  static const int operationStillInProgress = 12;
  static const int threadAlreadyInUse = 13;
  static const int threadAllocationFailed = 14;
  static const int threadNotReadyForResponse = 15;
  static const int threadNotResetForHandshake = 16;
  static const int threadNotYetFinalized = 17;
  static const int threadNotYetStarted = 18;
  static const int threadResponseFinalizationFailed = 19;
  static const int timeoutDuringTransport = 20;
  static const int unableToFinalizeAsyncAction = 21;
  static const int unknownErrorDuringHandshake = 22;
  static const int unknownErrorDuringTapProtocolFunction = 23;
  static const int unknownSatscardHandle = 24;
  static const int unknownSlotForGivenSatscardHandle = 25;
  static const int unknownTapsignerHandle = 26;
}

/// Used when accessing tap_protocol methods that can throw
class CKTapInterfaceStatus extends ffi.Struct {
  @ffi.Int32()
  external int errorCode;

  external CKTapProtoException exception;
}

class CKTapOperationResponse extends ffi.Struct {
  external CKTapCardHandle handle;

  @ffi.Int32()
  external int errorCode;
}

class CKTapProtoException extends ffi.Struct {
  @ffi.Int32()
  external int code;

  external ffi.Pointer<ffi.Char> message;
}

/// @brief Mirrors tap_protocol::TapProtoException
abstract class CKTapProtoExceptionErrorCode {
  static const int INVALID_DEVICE = 100;
  static const int UNLUCKY_NUMBER = 205;
  static const int BAD_ARGUMENTS = 400;
  static const int BAD_AUTH = 401;
  static const int NEED_AUTH = 403;
  static const int UNKNOW_COMMAND = 404;
  static const int INVALID_COMMAND = 405;
  static const int INVALID_STATE = 406;
  static const int WEAK_NONCE = 417;
  static const int BAD_CBOR = 422;
  static const int BACKUP_FIRST = 425;
  static const int RATE_LIMIT = 429;
  static const int DEFAULT_ERROR = 500;
  static const int MESSAGE_TOO_LONG = 601;
  static const int MISSING_KEY = 602;
  static const int ISO_SELECT_FAIL = 603;
  static const int SW_FAIL = 604;
  static const int INVALID_CVC_LENGTH = 605;
  static const int PICK_KEY_PAIR_FAIL = 606;
  static const int ECDH_FAIL = 607;
  static const int XCVC_FAIL = 608;
  static const int UNKNOW_PROTO_VERSION = 609;
  static const int INVALID_PUBKEY_LENGTH = 610;
  static const int NO_PRIVATE_KEY_PICKED = 611;
  static const int MALFORMED_BIP32_PATH = 612;
  static const int INVALID_HASH_LENGTH = 613;
  static const int SIG_VERIFY_ERROR = 614;
  static const int INVALID_DIGEST_LENGTH = 615;
  static const int INVALID_PATH_LENGTH = 616;
  static const int SERIALIZE_ERROR = 617;
  static const int EXCEEDED_RETRY = 618;
  static const int INVALID_CARD = 619;
  static const int SIGN_ERROR = 620;
  static const int SIG_TO_PUBKEY_FAIL = 621;
  static const int PSBT_PARSE_ERROR = 622;
  static const int PSBT_INVALID = 623;
  static const int INVALID_ADDRESS_TYPE = 624;
  static const int INVALID_BACKUP_KEY = 625;
  static const int INVALID_PUBKEY = 626;
  static const int INVALID_PRIVKEY = 627;
  static const int INVALID_SLOT = 628;
}

/// @brief Mirrors tap_protocol::Satscard::SlotStatus
abstract class CKTapSatscardSlotStatus {
  static const int UNUSED = 0;
  static const int SEALED = 1;
  static const int UNSEALED = 2;
}

/// @brief The current state of the background thread which handles tap-protocol commands
abstract class CKTapThreadState {
  /// Ready state
  static const int notStarted = 0;
  static const int asyncActionStarting = 1;

  /// Transport request loop
  static const int awaitingTransportRequest = 2;
  static const int transportRequestReady = 3;
  static const int transportResponseReady = 4;
  static const int processingTransportResponse = 5;

  /// Success state
  static const int finished = 6;

  /// Fail states
  static const int canceled = 7;
  static const int failed = 8;
  static const int invalidCardProduced = 9;
  static const int tapProtocolError = 10;
  static const int timeout = 11;
}

class SatscardConstructorParams extends ffi.Struct {
  external CKTapInterfaceStatus status;

  external CKTapCardConstructorParams base;

  @ffi.Int32()
  external int activeSlotIndex;

  @ffi.Int32()
  external int numSlots;

  @ffi.Int8()
  external int hasUnusedSlots;

  @ffi.Int8()
  external int isUsedUp;
}

class SatscardGetSlotResponse extends ffi.Struct {
  external CKTapInterfaceStatus status;

  external SlotConstructorParams params;
}

class SlotConstructorParams extends ffi.Struct {
  @ffi.Int32()
  external int satscardHandle;

  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int status;

  external ffi.Pointer<ffi.Char> address;

  /// Requires the CVC to acquire
  external CBinaryArray privkey;

  external CBinaryArray pubkey;

  external CBinaryArray masterPK;

  external CBinaryArray chainCode;
}

class SlotToWifResponse extends ffi.Struct {
  external CKTapInterfaceStatus status;

  external ffi.Pointer<ffi.Char> wif;
}

class TapsignerConstructorParams extends ffi.Struct {
  external CKTapInterfaceStatus status;

  external CKTapCardConstructorParams base;

  @ffi.Int32()
  external int numberOfBackups;

  external ffi.Pointer<ffi.Char> derivationPath;
}
