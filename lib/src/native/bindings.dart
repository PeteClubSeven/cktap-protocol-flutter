// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: experiment_not_enabled

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the source code in ./src/cpp
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> CKTapCard_getAppletVersionCString(
    int handle,
    int type,
  ) {
    return _CKTapCard_getAppletVersionCString(
      handle,
      type,
    );
  }

  late final _CKTapCard_getAppletVersionCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('CKTapCard_getAppletVersionCString');
  late final _CKTapCard_getAppletVersionCString =
      _CKTapCard_getAppletVersionCStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, int)>();

  int CKTapCard_getAuthDelay(
    int handle,
    int type,
  ) {
    return _CKTapCard_getAuthDelay(
      handle,
      type,
    );
  }

  late final _CKTapCard_getAuthDelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_getAuthDelay');
  late final _CKTapCard_getAuthDelay =
      _CKTapCard_getAuthDelayPtr.asFunction<int Function(int, int)>();

  int CKTapCard_getBirthHeight(
    int handle,
    int type,
  ) {
    return _CKTapCard_getBirthHeight(
      handle,
      type,
    );
  }

  late final _CKTapCard_getBirthHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_getBirthHeight');
  late final _CKTapCard_getBirthHeight =
      _CKTapCard_getBirthHeightPtr.asFunction<int Function(int, int)>();

  /// ----------------------------------------------
  /// CKTapCard:
  /// TODO: Simply data retrieval to avoid overhead of so many FFI calls and lookups
  ffi.Pointer<ffi.Char> CKTapCard_getIdentCString(
    int handle,
    int type,
  ) {
    return _CKTapCard_getIdentCString(
      handle,
      type,
    );
  }

  late final _CKTapCard_getIdentCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('CKTapCard_getIdentCString');
  late final _CKTapCard_getIdentCString = _CKTapCard_getIdentCStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  int CKTapCard_isCertsChecked(
    int handle,
    int type,
  ) {
    return _CKTapCard_isCertsChecked(
      handle,
      type,
    );
  }

  late final _CKTapCard_isCertsCheckedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_isCertsChecked');
  late final _CKTapCard_isCertsChecked =
      _CKTapCard_isCertsCheckedPtr.asFunction<int Function(int, int)>();

  int CKTapCard_isTampered(
    int handle,
    int type,
  ) {
    return _CKTapCard_isTampered(
      handle,
      type,
    );
  }

  late final _CKTapCard_isTamperedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_isTampered');
  late final _CKTapCard_isTampered =
      _CKTapCard_isTamperedPtr.asFunction<int Function(int, int)>();

  int CKTapCard_isTestnet(
    int handle,
    int type,
  ) {
    return _CKTapCard_isTestnet(
      handle,
      type,
    );
  }

  late final _CKTapCard_isTestnetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_isTestnet');
  late final _CKTapCard_isTestnet =
      _CKTapCard_isTestnetPtr.asFunction<int Function(int, int)>();

  int CKTapCard_needSetup(
    int handle,
    int type,
  ) {
    return _CKTapCard_needSetup(
      handle,
      type,
    );
  }

  late final _CKTapCard_needSetupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_needSetup');
  late final _CKTapCard_needSetup =
      _CKTapCard_needSetupPtr.asFunction<int Function(int, int)>();

  /// Ensures that the transport response buffer will be appropriately sized
  /// Returns a pointer to the buffer if valid, nullptr if not
  ffi.Pointer<ffi.Uint8> Core_allocateTransportResponseBuffer(
    int sizeInBytes,
  ) {
    return _Core_allocateTransportResponseBuffer(
      sizeInBytes,
    );
  }

  late final _Core_allocateTransportResponseBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int32)>>(
          'Core_allocateTransportResponseBuffer');
  late final _Core_allocateTransportResponseBuffer =
      _Core_allocateTransportResponseBufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Attempts to perform an initial handshake with a CKTapCard
  int Core_beginAsyncHandshake() {
    return _Core_beginAsyncHandshake();
  }

  late final _Core_beginAsyncHandshakePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_beginAsyncHandshake');
  late final _Core_beginAsyncHandshake =
      _Core_beginAsyncHandshakePtr.asFunction<int Function()>();

  /// Must be called last to store and retrieve Satscard/Tapsigner data
  CKTapOperationResponse Core_endOperation() {
    return _Core_endOperation();
  }

  late final _Core_endOperationPtr =
      _lookup<ffi.NativeFunction<CKTapOperationResponse Function()>>(
          'Core_endOperation');
  late final _Core_endOperation =
      _Core_endOperationPtr.asFunction<CKTapOperationResponse Function()>();

  /// Must be called at the end of every async action
  int Core_finalizeAsyncAction() {
    return _Core_finalizeAsyncAction();
  }

  late final _Core_finalizeAsyncActionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_finalizeAsyncAction');
  late final _Core_finalizeAsyncAction =
      _Core_finalizeAsyncActionPtr.asFunction<int Function()>();

  /// Informs the native thread that it's now safe to read the previously allocated buffer
  int Core_finalizeTransportResponse() {
    return _Core_finalizeTransportResponse();
  }

  late final _Core_finalizeTransportResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_finalizeTransportResponse');
  late final _Core_finalizeTransportResponse =
      _Core_finalizeTransportResponsePtr.asFunction<int Function()>();

  /// Gets the most recent tap_protocol::TapProtoException ONLY if the current thread state is
  /// CKTapThreadState::tapProtocolError
  CKTapProtoException Core_getTapProtoException() {
    return _Core_getTapProtoException();
  }

  late final _Core_getTapProtoExceptionPtr =
      _lookup<ffi.NativeFunction<CKTapProtoException Function()>>(
          'Core_getTapProtoException');
  late final _Core_getTapProtoException = _Core_getTapProtoExceptionPtr
      .asFunction<CKTapProtoException Function()>();

  /// Gets the current native thread state atomically
  int Core_getThreadState() {
    return _Core_getThreadState();
  }

  late final _Core_getThreadStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Core_getThreadState');
  late final _Core_getThreadState =
      _Core_getThreadStatePtr.asFunction<int Function()>();

  /// Retrieves the size of the current transport request in bytes
  /// Returns 0 if the native thread isn't ready or is invalid
  int Core_getTransportRequestLength() {
    return _Core_getTransportRequestLength();
  }

  late final _Core_getTransportRequestLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_getTransportRequestLength');
  late final _Core_getTransportRequestLength =
      _Core_getTransportRequestLengthPtr.asFunction<int Function()>();

  /// Retrieves a pointer to the current transport request
  /// Returns nullptr if the native thread isn't ready or is invalid
  ffi.Pointer<ffi.Uint8> Core_getTransportRequestPointer() {
    return _Core_getTransportRequestPointer();
  }

  late final _Core_getTransportRequestPointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
          'Core_getTransportRequestPointer');
  late final _Core_getTransportRequestPointer =
      _Core_getTransportRequestPointerPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function()>();

  /// Ensures the library and native thread are initialized
  int Core_initializeLibrary() {
    return _Core_initializeLibrary();
  }

  late final _Core_initializeLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_initializeLibrary');
  late final _Core_initializeLibrary =
      _Core_initializeLibraryPtr.asFunction<int Function()>();

  /// Must be called first to restore the native thread to its initial state
  int Core_newOperation() {
    return _Core_newOperation();
  }

  late final _Core_newOperationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Core_newOperation');
  late final _Core_newOperation =
      _Core_newOperationPtr.asFunction<int Function()>();

  /// ----------------------------------------------
  /// Satscard:
  /// TODO: Simply data retrieval to avoid overhead of so many FFI calls and lookups
  IntermediateSatscardSlot Satscard_getActiveSlot(
    int handle,
    int type,
  ) {
    return _Satscard_getActiveSlot(
      handle,
      type,
    );
  }

  late final _Satscard_getActiveSlotPtr = _lookup<
      ffi.NativeFunction<
          IntermediateSatscardSlot Function(
              ffi.Int32, ffi.Int32)>>('Satscard_getActiveSlot');
  late final _Satscard_getActiveSlot = _Satscard_getActiveSlotPtr.asFunction<
      IntermediateSatscardSlot Function(int, int)>();

  int Satscard_getActiveSlotIndex(
    int handle,
    int type,
  ) {
    return _Satscard_getActiveSlotIndex(
      handle,
      type,
    );
  }

  late final _Satscard_getActiveSlotIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_getActiveSlotIndex');
  late final _Satscard_getActiveSlotIndex =
      _Satscard_getActiveSlotIndexPtr.asFunction<int Function(int, int)>();

  int Satscard_getNumSlots(
    int handle,
    int type,
  ) {
    return _Satscard_getNumSlots(
      handle,
      type,
    );
  }

  late final _Satscard_getNumSlotsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_getNumSlots');
  late final _Satscard_getNumSlots =
      _Satscard_getNumSlotsPtr.asFunction<int Function(int, int)>();

  int Satscard_hasUnusedSlots(
    int handle,
    int type,
  ) {
    return _Satscard_hasUnusedSlots(
      handle,
      type,
    );
  }

  late final _Satscard_hasUnusedSlotsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_hasUnusedSlots');
  late final _Satscard_hasUnusedSlots =
      _Satscard_hasUnusedSlotsPtr.asFunction<int Function(int, int)>();

  int Satscard_isUsedUp(
    int handle,
    int type,
  ) {
    return _Satscard_isUsedUp(
      handle,
      type,
    );
  }

  late final _Satscard_isUsedUpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_isUsedUp');
  late final _Satscard_isUsedUp =
      _Satscard_isUsedUpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> Tapsigner_getDerivationPath(
    int handle,
    int type,
  ) {
    return _Tapsigner_getDerivationPath(
      handle,
      type,
    );
  }

  late final _Tapsigner_getDerivationPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('Tapsigner_getDerivationPath');
  late final _Tapsigner_getDerivationPath = _Tapsigner_getDerivationPathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  /// ----------------------------------------------
  /// Tapsigner:
  /// TODO: Simply data retrieval to avoid overhead of so many FFI calls and lookups
  int Tapsigner_getNumberOfBackups(
    int handle,
    int type,
  ) {
    return _Tapsigner_getNumberOfBackups(
      handle,
      type,
    );
  }

  late final _Tapsigner_getNumberOfBackupsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Tapsigner_getNumberOfBackups');
  late final _Tapsigner_getNumberOfBackups =
      _Tapsigner_getNumberOfBackupsPtr.asFunction<int Function(int, int)>();

  /// ----------------------------------------------
  /// Utility:
  void Utility_freeBinaryArray(
    CBinaryArray array,
  ) {
    return _Utility_freeBinaryArray(
      array,
    );
  }

  late final _Utility_freeBinaryArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBinaryArray)>>(
          'Utility_freeBinaryArray');
  late final _Utility_freeBinaryArray =
      _Utility_freeBinaryArrayPtr.asFunction<void Function(CBinaryArray)>();

  void Utility_freeIntermediateSatscardSlot(
    IntermediateSatscardSlot slot,
  ) {
    return _Utility_freeIntermediateSatscardSlot(
      slot,
    );
  }

  late final _Utility_freeIntermediateSatscardSlotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IntermediateSatscardSlot)>>(
          'Utility_freeIntermediateSatscardSlot');
  late final _Utility_freeIntermediateSatscardSlot =
      _Utility_freeIntermediateSatscardSlotPtr.asFunction<
          void Function(IntermediateSatscardSlot)>();

  void Utility_freeString(
    ffi.Pointer<ffi.Char> cString,
  ) {
    return _Utility_freeString(
      cString,
    );
  }

  late final _Utility_freeStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Utility_freeString');
  late final _Utility_freeString =
      _Utility_freeStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}

class CBinaryArray extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int length;
}

class CKTapCardHandle extends ffi.Struct {
  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int type;
}

abstract class CKTapCardType {
  static const int unknownCard = 0;
  static const int satscard = 1;
  static const int tapsigner = 2;
}

/// @brief Represents errors that may occur when the library is used incorrectly
abstract class CKTapInterfaceErrorCode {
  static const int pending = 0;
  static const int success = 1;
  static const int attemptToFinalizeActiveThread = 2;
  static const int caughtTapProtocolException = 3;
  static const int expectedSatscardButReceivedNothing = 4;
  static const int expectedTapsignerButReceivedNothing = 5;
  static const int failedToPerformHandshake = 6;
  static const int invalidHandlingOfTapCardDuringFinalization = 7;
  static const int libraryNotInitialized = 8;
  static const int operationStillInProgress = 9;
  static const int operationFailed = 10;
  static const int threadAlreadyInUse = 11;
  static const int threadAllocationFailed = 12;
  static const int threadNotReadyForResponse = 13;
  static const int threadNotResetForHandshake = 14;
  static const int threadNotYetFinalized = 15;
  static const int threadNotYetStarted = 16;
  static const int threadResponseFinalizationFailed = 17;
  static const int timeoutDuringTransport = 18;
  static const int unableToFinalizeAsyncAction = 19;
  static const int unknownErrorDuringHandshake = 20;
}

class CKTapOperationResponse extends ffi.Struct {
  external CKTapCardHandle handle;

  @ffi.Int32()
  external int errorCode;
}

class CKTapProtoException extends ffi.Struct {
  @ffi.Int32()
  external int code;

  external ffi.Pointer<ffi.Char> message;
}

/// @brief Mirrors tap_protocol::TapProtoException
abstract class CKTapProtoExceptionErrorCode {
  static const int INVALID_DEVICE = 100;
  static const int UNLUCKY_NUMBER = 205;
  static const int BAD_ARGUMENTS = 400;
  static const int BAD_AUTH = 401;
  static const int NEED_AUTH = 403;
  static const int UNKNOW_COMMAND = 404;
  static const int INVALID_COMMAND = 405;
  static const int INVALID_STATE = 406;
  static const int WEAK_NONCE = 417;
  static const int BAD_CBOR = 422;
  static const int BACKUP_FIRST = 425;
  static const int RATE_LIMIT = 429;
  static const int DEFAULT_ERROR = 500;
  static const int MESSAGE_TOO_LONG = 601;
  static const int MISSING_KEY = 602;
  static const int ISO_SELECT_FAIL = 603;
  static const int SW_FAIL = 604;
  static const int INVALID_CVC_LENGTH = 605;
  static const int PICK_KEY_PAIR_FAIL = 606;
  static const int ECDH_FAIL = 607;
  static const int XCVC_FAIL = 608;
  static const int UNKNOW_PROTO_VERSION = 609;
  static const int INVALID_PUBKEY_LENGTH = 610;
  static const int NO_PRIVATE_KEY_PICKED = 611;
  static const int MALFORMED_BIP32_PATH = 612;
  static const int INVALID_HASH_LENGTH = 613;
  static const int SIG_VERIFY_ERROR = 614;
  static const int INVALID_DIGEST_LENGTH = 615;
  static const int INVALID_PATH_LENGTH = 616;
  static const int SERIALIZE_ERROR = 617;
  static const int EXCEEDED_RETRY = 618;
  static const int INVALID_CARD = 619;
  static const int SIGN_ERROR = 620;
  static const int SIG_TO_PUBKEY_FAIL = 621;
  static const int PSBT_PARSE_ERROR = 622;
  static const int PSBT_INVALID = 623;
  static const int INVALID_ADDRESS_TYPE = 624;
  static const int INVALID_BACKUP_KEY = 625;
  static const int INVALID_PUBKEY = 626;
  static const int INVALID_PRIVKEY = 627;
  static const int INVALID_SLOT = 628;
}

/// @brief Mirrors tap_protocol::Satscard::SlotStatus
abstract class CKTapSatscardSlotStatus {
  static const int UNUSED = 0;
  static const int SEALED = 1;
  static const int UNSEALED = 2;
}

/// @brief The current state of the background thread which handles tap-protocol commands
abstract class CKTapThreadState {
  /// Ready state
  static const int notStarted = 0;
  static const int asyncActionStarting = 1;

  /// Transport request loop
  static const int awaitingTransportRequest = 2;
  static const int transportRequestReady = 3;
  static const int transportResponseReady = 4;
  static const int processingTransportResponse = 5;

  /// Success state
  static const int finished = 6;

  /// Fail states
  static const int canceled = 7;
  static const int failed = 8;
  static const int tapProtocolError = 9;
  static const int timeout = 10;
}

class IntermediateSatscardSlot extends ffi.Struct {
  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int status;

  external ffi.Pointer<ffi.Char> address;

  /// Requires the CVC to acquire
  external CBinaryArray privkey;

  external CBinaryArray pubkey;

  external CBinaryArray masterPK;

  external CBinaryArray chainCode;
}
