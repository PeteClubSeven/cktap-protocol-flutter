// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/cktap_protocol.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CKTapProtocolBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CKTapProtocolBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CKTapProtocolBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ----------------------------------------------
  /// Core Bindings:
  int Core_GetThreadState() {
    return _Core_GetThreadState();
  }

  late final _Core_GetThreadStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Core_GetThreadState');
  late final _Core_GetThreadState =
      _Core_GetThreadStatePtr.asFunction<int Function()>();

  int Core_BeginInitialization() {
    return _Core_BeginInitialization();
  }

  late final _Core_BeginInitializationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_BeginInitialization');
  late final _Core_BeginInitialization =
      _Core_BeginInitializationPtr.asFunction<int Function()>();

  CKTapCardFinalizeOperationResponse Core_FinalizeRecentOperation() {
    return _Core_FinalizeRecentOperation();
  }

  late final _Core_FinalizeRecentOperationPtr = _lookup<
          ffi.NativeFunction<CKTapCardFinalizeOperationResponse Function()>>(
      'Core_FinalizeRecentOperation');
  late final _Core_FinalizeRecentOperation = _Core_FinalizeRecentOperationPtr
      .asFunction<CKTapCardFinalizeOperationResponse Function()>();

  ffi.Pointer<ffi.Uint8> Core_GetTransportRequestPointer() {
    return _Core_GetTransportRequestPointer();
  }

  late final _Core_GetTransportRequestPointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
          'Core_GetTransportRequestPointer');
  late final _Core_GetTransportRequestPointer =
      _Core_GetTransportRequestPointerPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function()>();

  int Core_GetTransportRequestLength() {
    return _Core_GetTransportRequestLength();
  }

  late final _Core_GetTransportRequestLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_GetTransportRequestLength');
  late final _Core_GetTransportRequestLength =
      _Core_GetTransportRequestLengthPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Uint8> Core_AllocateTransportResponseBuffer(
    int sizeInBytes,
  ) {
    return _Core_AllocateTransportResponseBuffer(
      sizeInBytes,
    );
  }

  late final _Core_AllocateTransportResponseBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int32)>>(
          'Core_AllocateTransportResponseBuffer');
  late final _Core_AllocateTransportResponseBuffer =
      _Core_AllocateTransportResponseBufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(int)>();

  int Core_FinalizeTransportResponse() {
    return _Core_FinalizeTransportResponse();
  }

  late final _Core_FinalizeTransportResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Core_FinalizeTransportResponse');
  late final _Core_FinalizeTransportResponse =
      _Core_FinalizeTransportResponsePtr.asFunction<int Function()>();

  /// ----------------------------------------------
  /// CKTapCard:
  ffi.Pointer<ffi.Char> CKTapCard_GetIdentCString(
    int handle,
    int type,
  ) {
    return _CKTapCard_GetIdentCString(
      handle,
      type,
    );
  }

  late final _CKTapCard_GetIdentCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('CKTapCard_GetIdentCString');
  late final _CKTapCard_GetIdentCString = _CKTapCard_GetIdentCStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> CKTapCard_GetAppletVersionCString(
    int handle,
    int type,
  ) {
    return _CKTapCard_GetAppletVersionCString(
      handle,
      type,
    );
  }

  late final _CKTapCard_GetAppletVersionCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('CKTapCard_GetAppletVersionCString');
  late final _CKTapCard_GetAppletVersionCString =
      _CKTapCard_GetAppletVersionCStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, int)>();

  int CKTapCard_GetBirthHeight(
    int handle,
    int type,
  ) {
    return _CKTapCard_GetBirthHeight(
      handle,
      type,
    );
  }

  late final _CKTapCard_GetBirthHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_GetBirthHeight');
  late final _CKTapCard_GetBirthHeight =
      _CKTapCard_GetBirthHeightPtr.asFunction<int Function(int, int)>();

  int CKTapCard_IsTestnet(
    int handle,
    int type,
  ) {
    return _CKTapCard_IsTestnet(
      handle,
      type,
    );
  }

  late final _CKTapCard_IsTestnetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_IsTestnet');
  late final _CKTapCard_IsTestnet =
      _CKTapCard_IsTestnetPtr.asFunction<int Function(int, int)>();

  int CKTapCard_GetAuthDelay(
    int handle,
    int type,
  ) {
    return _CKTapCard_GetAuthDelay(
      handle,
      type,
    );
  }

  late final _CKTapCard_GetAuthDelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_GetAuthDelay');
  late final _CKTapCard_GetAuthDelay =
      _CKTapCard_GetAuthDelayPtr.asFunction<int Function(int, int)>();

  int CKTapCard_IsTampered(
    int handle,
    int type,
  ) {
    return _CKTapCard_IsTampered(
      handle,
      type,
    );
  }

  late final _CKTapCard_IsTamperedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_IsTampered');
  late final _CKTapCard_IsTampered =
      _CKTapCard_IsTamperedPtr.asFunction<int Function(int, int)>();

  int CKTapCard_IsCertsChecked(
    int handle,
    int type,
  ) {
    return _CKTapCard_IsCertsChecked(
      handle,
      type,
    );
  }

  late final _CKTapCard_IsCertsCheckedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_IsCertsChecked');
  late final _CKTapCard_IsCertsChecked =
      _CKTapCard_IsCertsCheckedPtr.asFunction<int Function(int, int)>();

  int CKTapCard_NeedSetup(
    int handle,
    int type,
  ) {
    return _CKTapCard_NeedSetup(
      handle,
      type,
    );
  }

  late final _CKTapCard_NeedSetupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'CKTapCard_NeedSetup');
  late final _CKTapCard_NeedSetup =
      _CKTapCard_NeedSetupPtr.asFunction<int Function(int, int)>();

  /// ----------------------------------------------
  /// Satscard:
  IntermediateSatscardSlot Satscard_GetActiveSlot(
    int handle,
    int type,
  ) {
    return _Satscard_GetActiveSlot(
      handle,
      type,
    );
  }

  late final _Satscard_GetActiveSlotPtr = _lookup<
      ffi.NativeFunction<
          IntermediateSatscardSlot Function(
              ffi.Int32, ffi.Int32)>>('Satscard_GetActiveSlot');
  late final _Satscard_GetActiveSlot = _Satscard_GetActiveSlotPtr.asFunction<
      IntermediateSatscardSlot Function(int, int)>();

  int Satscard_GetActiveSlotIndex(
    int handle,
    int type,
  ) {
    return _Satscard_GetActiveSlotIndex(
      handle,
      type,
    );
  }

  late final _Satscard_GetActiveSlotIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_GetActiveSlotIndex');
  late final _Satscard_GetActiveSlotIndex =
      _Satscard_GetActiveSlotIndexPtr.asFunction<int Function(int, int)>();

  int Satscard_GetNumSlots(
    int handle,
    int type,
  ) {
    return _Satscard_GetNumSlots(
      handle,
      type,
    );
  }

  late final _Satscard_GetNumSlotsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_GetNumSlots');
  late final _Satscard_GetNumSlots =
      _Satscard_GetNumSlotsPtr.asFunction<int Function(int, int)>();

  int Satscard_HasUnusedSlots(
    int handle,
    int type,
  ) {
    return _Satscard_HasUnusedSlots(
      handle,
      type,
    );
  }

  late final _Satscard_HasUnusedSlotsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_HasUnusedSlots');
  late final _Satscard_HasUnusedSlots =
      _Satscard_HasUnusedSlotsPtr.asFunction<int Function(int, int)>();

  int Satscard_IsUsedUp(
    int handle,
    int type,
  ) {
    return _Satscard_IsUsedUp(
      handle,
      type,
    );
  }

  late final _Satscard_IsUsedUpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Satscard_IsUsedUp');
  late final _Satscard_IsUsedUp =
      _Satscard_IsUsedUpPtr.asFunction<int Function(int, int)>();

  /// ----------------------------------------------
  /// Tapsigner:
  int Tapsigner_GetNumberOfBackups(
    int handle,
    int type,
  ) {
    return _Tapsigner_GetNumberOfBackups(
      handle,
      type,
    );
  }

  late final _Tapsigner_GetNumberOfBackupsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Tapsigner_GetNumberOfBackups');
  late final _Tapsigner_GetNumberOfBackups =
      _Tapsigner_GetNumberOfBackupsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> Tapsigner_GetDerivationPath(
    int handle,
    int type,
  ) {
    return _Tapsigner_GetDerivationPath(
      handle,
      type,
    );
  }

  late final _Tapsigner_GetDerivationPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Int32)>>('Tapsigner_GetDerivationPath');
  late final _Tapsigner_GetDerivationPath = _Tapsigner_GetDerivationPathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  /// ----------------------------------------------
  /// Utility:
  void Utility_FreeBinaryArray(
    CBinaryArray array,
  ) {
    return _Utility_FreeBinaryArray(
      array,
    );
  }

  late final _Utility_FreeBinaryArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBinaryArray)>>(
          'Utility_FreeBinaryArray');
  late final _Utility_FreeBinaryArray =
      _Utility_FreeBinaryArrayPtr.asFunction<void Function(CBinaryArray)>();

  void Utility_FreeIntermediateSatscardSlot(
    IntermediateSatscardSlot slot,
  ) {
    return _Utility_FreeIntermediateSatscardSlot(
      slot,
    );
  }

  late final _Utility_FreeIntermediateSatscardSlotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IntermediateSatscardSlot)>>(
          'Utility_FreeIntermediateSatscardSlot');
  late final _Utility_FreeIntermediateSatscardSlot =
      _Utility_FreeIntermediateSatscardSlotPtr.asFunction<
          void Function(IntermediateSatscardSlot)>();

  void Utility_FreeString(
    ffi.Pointer<ffi.Char> cString,
  ) {
    return _Utility_FreeString(
      cString,
    );
  }

  late final _Utility_FreeStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Utility_FreeString');
  late final _Utility_FreeString =
      _Utility_FreeStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}

abstract class CKTapCardType {
  static const int UnknownCard = 0;
  static const int Satscard = 1;
  static const int Tapsigner = 2;
}

/// @brief Represents errors that may occur when the library is used incorrectly
abstract class CKTapInterfaceErrorCode {
  static const int Success = 0;
  static const int ExpectedTapsignerButReceivedNothing = 1;
  static const int ExpectedSatscardButReceivedNothing = 2;
  static const int InvalidHandlingOfTapCardDuringOperationFinalization = 3;
  static const int ThreadAlreadyInUse = 4;
  static const int ThreadAllocationFailed = 5;
  static const int ThreadEncounterTapProtocolError = 6;
  static const int ThreadFailedtoStart = 7;
  static const int ThreadFinishedBeforeInitialTransportRequest = 8;
  static const int ThreadNotYetStarted = 9;
  static const int ThreadNotReadyForResponse = 10;
  static const int ThreadOperationFinalizationFailed = 11;
  static const int ThreadResponseFinalizationFailed = 12;
  static const int ThreadTimeoutDuringTransport = 13;
  static const int UnknownErrorDuringInitialization = 14;
}

/// @brief Mirrors tap_protocol::TapProtoException
abstract class CKTapInternalErrorCode {
  static const int INVALID_DEVICE = 100;
  static const int UNLUCKY_NUMBER = 205;
  static const int BAD_ARGUMENTS = 400;
  static const int BAD_AUTH = 401;
  static const int NEED_AUTH = 403;
  static const int UNKNOW_COMMAND = 404;
  static const int INVALID_COMMAND = 405;
  static const int INVALID_STATE = 406;
  static const int WEAK_NONCE = 417;
  static const int BAD_CBOR = 422;
  static const int BACKUP_FIRST = 425;
  static const int RATE_LIMIT = 429;
  static const int DEFAULT_ERROR = 500;
  static const int MESSAGE_TOO_LONG = 601;
  static const int MISSING_KEY = 602;
  static const int ISO_SELECT_FAIL = 603;
  static const int SW_FAIL = 604;
  static const int INVALID_CVC_LENGTH = 605;
  static const int PICK_KEY_PAIR_FAIL = 606;
  static const int ECDH_FAIL = 607;
  static const int XCVC_FAIL = 608;
  static const int UNKNOW_PROTO_VERSION = 609;
  static const int INVALID_PUBKEY_LENGTH = 610;
  static const int NO_PRIVATE_KEY_PICKED = 611;
  static const int MALFORMED_BIP32_PATH = 612;
  static const int INVALID_HASH_LENGTH = 613;
  static const int SIG_VERIFY_ERROR = 614;
  static const int INVALID_DIGEST_LENGTH = 615;
  static const int INVALID_PATH_LENGTH = 616;
  static const int SERIALIZE_ERROR = 617;
  static const int EXCEEDED_RETRY = 618;
  static const int INVALID_CARD = 619;
  static const int SIGN_ERROR = 620;
  static const int SIG_TO_PUBKEY_FAIL = 621;
  static const int PSBT_PARSE_ERROR = 622;
  static const int PSBT_INVALID = 623;
  static const int INVALID_ADDRESS_TYPE = 624;
  static const int INVALID_BACKUP_KEY = 625;
  static const int INVALID_PUBKEY = 626;
  static const int INVALID_PRIVKEY = 627;
  static const int INVALID_SLOT = 628;
}

/// @brief Mirrors tap_protocol::Satscard::SlotStatus
abstract class CKTapSatscardSlotStatus {
  static const int UNUSED = 0;
  static const int SEALED = 1;
  static const int UNSEALED = 2;
}

/// @brief The current state of the background thread which handles tap-protocol commands
abstract class CKTapThreadState {
  static const int NotStarted = 0;
  static const int AwaitingTransportRequest = 1;
  static const int TransportRequestReady = 2;
  static const int TransportResponseReady = 3;
  static const int ProcessingTransportResponse = 4;
  static const int Finished = 5;
  static const int Timeout = 6;
  static const int TapProtocolError = 7;
}

class CBinaryArray extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int length;
}

class CKTapCardHandle extends ffi.Struct {
  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int type;
}

class CKTapCardFinalizeOperationResponse extends ffi.Struct {
  external CKTapCardHandle handle;

  @ffi.Int32()
  external int errorCode;
}

class IntermediateSatscardSlot extends ffi.Struct {
  @ffi.Int32()
  external int index;

  @ffi.Int32()
  external int status;

  external ffi.Pointer<ffi.Char> address;

  /// Requires the CVC to acquire
  external CBinaryArray privkey;

  external CBinaryArray pubkey;

  external CBinaryArray masterPK;

  external CBinaryArray chainCode;
}
