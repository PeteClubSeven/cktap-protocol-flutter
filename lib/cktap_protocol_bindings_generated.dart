// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/cktap_protocol.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CKTapProtocolBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CKTapProtocolBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CKTapProtocolBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int CKTapCard_GetThreadState() {
    return _CKTapCard_GetThreadState();
  }

  late final _CKTapCard_GetThreadStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'CKTapCard_GetThreadState');
  late final _CKTapCard_GetThreadState =
      _CKTapCard_GetThreadStatePtr.asFunction<int Function()>();

  int CKTapCard_BeginInitialization() {
    return _CKTapCard_BeginInitialization();
  }

  late final _CKTapCard_BeginInitializationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'CKTapCard_BeginInitialization');
  late final _CKTapCard_BeginInitialization =
      _CKTapCard_BeginInitializationPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Uint8> CKTapCard_GetTransportRequestPointer() {
    return _CKTapCard_GetTransportRequestPointer();
  }

  late final _CKTapCard_GetTransportRequestPointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
          'CKTapCard_GetTransportRequestPointer');
  late final _CKTapCard_GetTransportRequestPointer =
      _CKTapCard_GetTransportRequestPointerPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function()>();

  int CKTapCard_GetTransportRequestLength() {
    return _CKTapCard_GetTransportRequestLength();
  }

  late final _CKTapCard_GetTransportRequestLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'CKTapCard_GetTransportRequestLength');
  late final _CKTapCard_GetTransportRequestLength =
      _CKTapCard_GetTransportRequestLengthPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Uint8> CKTapCard_AllocateTransportResponseBuffer(
    int sizeInBytes,
  ) {
    return _CKTapCard_AllocateTransportResponseBuffer(
      sizeInBytes,
    );
  }

  late final _CKTapCard_AllocateTransportResponseBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int32)>>(
          'CKTapCard_AllocateTransportResponseBuffer');
  late final _CKTapCard_AllocateTransportResponseBuffer =
      _CKTapCard_AllocateTransportResponseBufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(int)>();

  int CKTapCard_FinalizeTransportResponse() {
    return _CKTapCard_FinalizeTransportResponse();
  }

  late final _CKTapCard_FinalizeTransportResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'CKTapCard_FinalizeTransportResponse');
  late final _CKTapCard_FinalizeTransportResponse =
      _CKTapCard_FinalizeTransportResponsePtr.asFunction<int Function()>();
}

/// @brief Represents errors that may occur when the library is used incorrectly
abstract class CKTapInterfaceErrorCode {
  static const int Success = 0;
  static const int ThreadAlreadyInUse = 1;
  static const int ThreadAllocationFailed = 2;
  static const int ThreadFailedtoStart = 3;
  static const int ThreadFinishedBeforeInitialTransportRequest = 4;
  static const int ThreadNotYetStarted = 5;
  static const int ThreadNotReadyForResponse = 6;
  static const int ThreadResponseFinalizationFailed = 7;
}

/// @brief Mirrors tap_protocol::TapProtoException
abstract class CKTapInternalErrorCode {
  static const int INVALID_DEVICE = 100;
  static const int UNLUCKY_NUMBER = 205;
  static const int BAD_ARGUMENTS = 400;
  static const int BAD_AUTH = 401;
  static const int NEED_AUTH = 403;
  static const int UNKNOW_COMMAND = 404;
  static const int INVALID_COMMAND = 405;
  static const int INVALID_STATE = 406;
  static const int WEAK_NONCE = 417;
  static const int BAD_CBOR = 422;
  static const int BACKUP_FIRST = 425;
  static const int RATE_LIMIT = 429;
  static const int DEFAULT_ERROR = 500;
  static const int MESSAGE_TOO_LONG = 601;
  static const int MISSING_KEY = 602;
  static const int ISO_SELECT_FAIL = 603;
  static const int SW_FAIL = 604;
  static const int INVALID_CVC_LENGTH = 605;
  static const int PICK_KEY_PAIR_FAIL = 606;
  static const int ECDH_FAIL = 607;
  static const int XCVC_FAIL = 608;
  static const int UNKNOW_PROTO_VERSION = 609;
  static const int INVALID_PUBKEY_LENGTH = 610;
  static const int NO_PRIVATE_KEY_PICKED = 611;
  static const int MALFORMED_BIP32_PATH = 612;
  static const int INVALID_HASH_LENGTH = 613;
  static const int SIG_VERIFY_ERROR = 614;
  static const int INVALID_DIGEST_LENGTH = 615;
  static const int INVALID_PATH_LENGTH = 616;
  static const int SERIALIZE_ERROR = 617;
  static const int EXCEEDED_RETRY = 618;
  static const int INVALID_CARD = 619;
  static const int SIGN_ERROR = 620;
  static const int SIG_TO_PUBKEY_FAIL = 621;
  static const int PSBT_PARSE_ERROR = 622;
  static const int PSBT_INVALID = 623;
  static const int INVALID_ADDRESS_TYPE = 624;
  static const int INVALID_BACKUP_KEY = 625;
  static const int INVALID_PUBKEY = 626;
  static const int INVALID_PRIVKEY = 627;
  static const int INVALID_SLOT = 628;
}

/// @brief The current state of the background thread which handles tap-protocol commands
abstract class CKTapThreadState {
  static const int NotStarted = 0;
  static const int AwaitingTransportRequest = 1;
  static const int TransportRequestReady = 2;
  static const int TransportResponseReady = 3;
  static const int ProcessingTransportResponse = 4;
  static const int Timeout = 5;
  static const int Finished = 6;
}
