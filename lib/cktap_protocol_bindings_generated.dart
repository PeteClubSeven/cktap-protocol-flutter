// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/cktap_protocol.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CktapProtocolBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CktapProtocolBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CktapProtocolBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  /// @brief
  /// @param transmitFunc
  /// @return The handle of the constructed object, 1 or higher are valid values, negative values are errors.
  int cktapcard_constructor(
    int requestID,
    TransmitDataFunction transmitFunc,
  ) {
    return _cktapcard_constructor(
      requestID,
      transmitFunc,
    );
  }

  late final _cktapcard_constructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32, TransmitDataFunction)>>('cktapcard_constructor');
  late final _cktapcard_constructor = _cktapcard_constructorPtr
      .asFunction<int Function(int, TransmitDataFunction)>();

  ffi.Pointer<ffi.Uint8> cktapcard_allocateResponse(
    int sizeInBytes,
  ) {
    return _cktapcard_allocateResponse(
      sizeInBytes,
    );
  }

  late final _cktapcard_allocateResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int32)>>(
          'cktapcard_allocateResponse');
  late final _cktapcard_allocateResponse = _cktapcard_allocateResponsePtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  int cktapcard_finalizeResponse() {
    return _cktapcard_finalizeResponse();
  }

  late final _cktapcard_finalizeResponsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'cktapcard_finalizeResponse');
  late final _cktapcard_finalizeResponse =
      _cktapcard_finalizeResponsePtr.asFunction<int Function()>();
}

/// A function pointer to handle transmitting data between the tap-protocol library and the actual card
/// The function will be called using the prepared data to transmit. The response should be written into
/// the given buffer.
/// The function should return an error code, 0 for successful.
typedef TransmitDataFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32)>>;
